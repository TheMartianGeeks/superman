{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red185\green122\blue229;\red25\green25\blue25;\red234\green255\blue255;
\red121\green213\blue255;\red238\green252\blue255;\red184\green230\blue123;\red112\green150\blue255;\red58\green58\blue58;
\red242\green119\blue89;}
{\*\expandedcolortbl;;\csgenericrgb\c72549\c47843\c89804;\csgenericrgb\c9804\c9804\c9804;\csgenericrgb\c91765\c100000\c100000;
\csgenericrgb\c47451\c83529\c100000;\csgenericrgb\c93333\c98824\c100000;\csgenericrgb\c72157\c90196\c48235;\csgenericrgb\c43922\c58824\c100000;\csgenericrgb\c22745\c22745\c22745;
\csgenericrgb\c94902\c46667\c34902;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\i\fs24 \cf2 \cb3 const 
\i0 \cf4 path \cf5 = \cf6 require\cf5 (\cf7 'path'\cf5 );\

\i \cf2 const 
\i0 \cf4 colors \cf5 = \cf6 require\cf5 (\cf7 'colors/safe'\cf5 );\

\i \cf2 const 
\i0 \cf4 fs \cf5 = \cf6 require\cf5 (\cf7 'fs'\cf5 );\

\i \cf2 const 
\i0 \cf4 packageFile \cf5 = \cf4 JSON\cf5 .\cf8 stringify\cf5 (\cf6 require\cf5 (\cf7 '../package.json'\cf5 ));\

\i \cf2 const 
\i0 \cf4 appVersion \cf5 = \cf6 require\cf5 (\cf7 '../package.json'\cf5 ).\cf4 version\cf5 ;\
\

\i \cf9 // Split version block\
\cf2 const 
\i0 \cf4 modifyAppVersion \cf5 = \cf4 appVersion\cf5 .\cf8 split\cf5 (\cf7 '.'\cf5 );\
\

\i \cf9 // Init variables\
\cf2 let 
\i0 \cf4 major \cf5 = \cf8 parseInt\cf5 (\cf4 modifyAppVersion\cf5 [\cf10 0\cf5 ]);\

\i \cf2 let 
\i0 \cf4 minor \cf5 = \cf8 parseInt\cf5 (\cf4 modifyAppVersion\cf5 [\cf10 1\cf5 ]);\

\i \cf2 let 
\i0 \cf4 release \cf5 = \cf8 parseInt\cf5 (\cf4 modifyAppVersion\cf5 [\cf10 2\cf5 ]);\
\

\i \cf9 /**\
 * Write minor, major and release content\
 */\
\cf2 if 
\i0 \cf5 (\cf4 minor \cf5 === \cf10 0 \cf5 || \cf4 minor \cf5 < \cf10 99\cf5 ) \{\
  
\i \cf2 if 
\i0 \cf5 (\cf4 release \cf5 === \cf10 0 \cf5 || \cf4 release \cf5 < \cf10 99\cf5 ) \{\
    \cf4 release \cf5 = \cf4 release \cf5 + \cf10 1\cf5 ;\
  \}
\i \cf2 else if 
\i0 \cf5 (\cf4 release \cf5 === \cf10 99\cf5 ) \{\
    \cf4 release \cf5 = \cf10 0\cf5 ;\
    \cf4 minor \cf5 = \cf4 minor \cf5 + \cf10 1\cf5 ;\
  \}\
\}
\i \cf2 else if 
\i0 \cf5 (\cf4 minor \cf5 === \cf10 99\cf5 ) \{\
  \cf4 minor \cf5 = \cf10 0\cf5 ;\
  \cf4 major \cf5 = \cf4 major \cf5 + \cf10 1\cf5 ;\
\}\
\

\i \cf9 // Replace package.json file version line content\
\cf2 let 
\i0 \cf4 newVersion \cf5 = \cf7 `\cf4 $\cf5 \{\cf4 major\cf5 \}\cf7 .\cf4 $\cf5 \{\cf4 minor\cf5 \}\cf7 .\cf4 $\cf5 \{\cf4 release\cf5 \}\cf7 `\cf5 ;\

\i \cf2 const 
\i0 \cf4 newContent \cf5 = \cf4 packageFile\cf5 .\cf8 replace\cf5 (\cf7 `"version":"\cf4 $\cf5 \{\cf4 appVersion\cf5 \}\cf7 "`\cf5 , \cf7 `"version":"\cf4 $\cf5 \{\cf4 newVersion\cf5 \}\cf7 "`\cf5 );\
\

\i \cf9 // Write package.json file\
\cf2 const 
\i0 \cf4 newFIlePackage \cf5 = \cf4 JSON\cf5 .\cf8 parse\cf5 (\cf4 newContent\cf5 );\

\i \cf2 let 
\i0 \cf4 data \cf5 = \cf4 JSON\cf5 .\cf8 stringify\cf5 (\cf4 newFIlePackage\cf5 , 
\i \cf2 null
\i0 \cf5 , \cf10 2\cf5 );\
\

\i \cf9 /******************\
 * Package file\
 *******************/\
\cf2 const 
\i0 \cf4 packagePath \cf5 = \cf4 path\cf5 .\cf8 join\cf5 (\cf6 __dirname \cf5 + \cf7 '/../package.json'\cf5 );\
\cf4 fs\cf5 .\cf8 writeFile\cf5 (\cf4 packagePath\cf5 , \cf4 data\cf5 , \{ \cf6 flat\cf5 : \cf7 'w' \cf5 \}, 
\i \cf2 function 
\i0 \cf5 (\cf10 err\cf5 ) \{\
  \cf4 console\cf5 .\cf8 log\cf5 (\cf4 colors\cf5 .\cf4 cyan\cf5 (\cf7 '\cf4 \\n\cf7 Running package.json versioning tasks'\cf5 ));\
  
\i \cf2 if 
\i0 \cf5 (\cf10 err\cf5 ) \{\
    
\i \cf2 return 
\i0 \cf4 console\cf5 .\cf8 log\cf5 (\cf4 colors\cf5 .\cf4 red\cf5 (\cf10 err\cf5 ));\
  \}\
  \cf4 console\cf5 .\cf8 log\cf5 (\cf4 colors\cf5 .\cf4 green\cf5 (\cf7 `Updating application version \cf4 $\cf5 \{\cf4 colors\cf5 .\cf4 yellow\cf5 (\cf4 newVersion\cf5 )\}\cf7 `\cf5 ));\
  \cf4 console\cf5 .\cf8 log\cf5 (\cf7 `\cf4 $\cf5 \{\cf4 colors\cf5 .\cf4 green\cf5 (\cf7 'Update version module to '\cf5 )\}\cf4 $\cf5 \{\cf4 colors\cf5 .\cf4 yellow\cf5 (\cf4 packagePath\cf5 )\}\cf4 \\n\cf7 `\cf5 );\
\});\
\
\

\i \cf9 /******************\
 * Version file\
 *******************/\
\cf2 const 
\i0 \cf4 versionFilePath \cf5 = \cf4 path\cf5 .\cf8 join\cf5 (\cf6 __dirname \cf5 + \cf7 '/../src/environments/version.ts'\cf5 );\

\i \cf2 const 
\i0 \cf4 src \cf5 = \cf7 `export const version = '\cf4 $\cf5 \{\cf4 newVersion\cf5 \}\cf7 ';\cf4 \\n\cf7 `\cf5 ;\
\cf4 console\cf5 .\cf8 log\cf5 (\cf4 colors\cf5 .\cf4 cyan\cf5 (\cf7 '\cf4 \\n\cf7 Running environement version versioning tasks'\cf5 ));\

\i \cf9 // ensure version module pulls value from package.json\

\i0 \cf4 fs\cf5 .\cf8 writeFile\cf5 (\cf4 versionFilePath\cf5 , \cf4 src\cf5 , \{ \cf6 flat\cf5 : \cf7 'w' \cf5 \}, 
\i \cf2 function 
\i0 \cf5 (\cf10 err\cf5 ) \{\
  
\i \cf2 if 
\i0 \cf5 (\cf10 err\cf5 ) \{\
    
\i \cf2 return 
\i0 \cf4 console\cf5 .\cf8 log\cf5 (\cf4 colors\cf5 .\cf4 red\cf5 (\cf10 err\cf5 ));\
  \}\
  \cf4 console\cf5 .\cf8 log\cf5 (\cf4 colors\cf5 .\cf4 green\cf5 (\cf7 `Updating application version \cf4 $\cf5 \{\cf4 colors\cf5 .\cf4 yellow\cf5 (\cf4 newVersion\cf5 )\}\cf7 `\cf5 ));\
  \cf4 console\cf5 .\cf8 log\cf5 (\cf7 `\cf4 $\cf5 \{\cf4 colors\cf5 .\cf4 green\cf5 (\cf7 'Writing version module to '\cf5 )\}\cf4 $\cf5 \{\cf4 colors\cf5 .\cf4 yellow\cf5 (\cf4 versionFilePath\cf5 )\}\cf4 \\n\cf7 `\cf5 );\
\});\
\
}